/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'kotlin'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:21.0'
    compile 'org.javasimon:javasimon-core:4.1.2'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.fusesource.jansi:jansi:1.16'
    compile "com.sparkjava:spark-core:$sparkjava_version"
    compile "com.sparkjava:spark-template-jinjava:$sparkjava_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.google.code.gson:gson:2.8.2'

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.4.0'
}

configurations {
    //runtime.exclude module: 'slf4j-api'
}

version = '1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Define the main class for the application
mainClassName = 'murphytalk.arithmetic.ArithmeticKt'
buildscript {
    ext{
        kotlin_version = '1.2.10'
        sparkjava_version = '2.7.1'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}


task listrepos << {
    println "Repositories:"
    project.repositories.each { println "Name: " + it.name + "; url: " + it.url }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'murphytalk\'s JavaNotes',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
