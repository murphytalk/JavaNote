{% extends "templates/layout.jinja2" %}

{% block head %}
    <link rel="stylesheet" href="/content/mathjax.css">
    <script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML'>
        MathJax.Hub.Config({
            extensions: ["tex2jax.js"],
            jax: ["input/TeX","output/HTML-CSS"],
            tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}
        });
    </script>
{% endblock %}

{% block content %}
    <div class="modal fade" id="my_result" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">
                        You spend <span id="total_time_spent"></span> to finish !
                    </h4>
                </div>
                <div class="modal-body">
                    <!--
                    <div>
                        Averagely <span id="avg_time"></span> per question !
                    </div>
                    -->
                    <p>Average Summary</p>
                    <ul class="list-group">
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            How much time spent on one question
                            <span id="avg_time" class="badge badge-success badge-pill"></span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            How many times to correctly answer one question
                            <span id="avg_retry" class="badge badge-warning badge-pill"></span>
                        </li>
                    </ul>
                    <div id="pieAccuracy"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div id  = "question_numbers" style="text-align: right;">
        <span id="cur_question">1</span>/<span id="total_question">10</span>
    </div>
    <div class="progress">
        <div id="my_progress" class="progress-bar" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
    </div>
    <div id="MathOutput" class="preview" style="">$${}$$</div>
{% endblock %}

{% block footer %}
    <div id="my_input" class="input-group">
        <span class="input-group-addon">Your answer</span>
        <input id="answer" type="text" class="form-control" placeholder="Press enter to submit">
    </div>
{% endblock %}

{% block scripts %}
    <script type="text/javascript" src="https://code.highcharts.com/highcharts.js"></script>
    <script type="text/javascript" src="https://code.highcharts.com/modules/exporting.js"></script>
    <script type="text/javascript" src="/scripts/chart.js"></script>
    <script>
        var the_questions = null;
        var current_question = -1;
        var math = null;
        const QUEUE = MathJax.Hub.queue;  // shorthand for the queue

        var start_time =  new Date();

        function get_epoch(dt){
            return dt.getTime() / 1000;
        }

        function format_time_in_m_s(tm){
            var min = Math.floor(tm / 60);
            var sec = Math.floor(tm % 60);
            var str = "";
            if(min>0){
                str = min.toString() + " min ";
            }
            if(sec>0){
                str += sec.toString() + " sec";
            }
            return str;
        }

        function populateMath(question) {
            //console.log("Q= " + question);
            QUEUE.Push(["Text",math,"\\displaystyle{"+question+"}"]);
        }

        function updateProcess(){
            $('#cur_question').text(current_question+1);
            var percentage = 100 * (current_question+1)/the_questions.length;
            var style = "width: "+ percentage.toString() + "%";
            var progress = $('#my_progress');
            progress.attr('style',style);
            progress.attr('aria-valuenow', percentage);

            const threshold = 25;
            var progress_class = "progress-bar progress-bar-";
            if(percentage>=threshold*3){
                //>=75%
                progress_class += "success";
            }
            else if(percentage>=threshold*2){
                //50-75%
                progress_class += "info";
            }
            else if(percentage>=threshold) {
                //25-50%
                progress_class += "warning";
            }
            else{
                //<25
                progress_class += "danger";
            }
            progress.attr('class',progress_class);
        }

        function checkAnswer(answer){
            //console.log("entered answer "+ answer);
            if(current_question >=0 ){
                console.log("correct answer "+the_questions[current_question]['correctAnswer']);
                the_questions[current_question]['times']+=1;
                if(answer === the_questions[current_question]['correctAnswer']){
                    updateProcess();
                    if(current_question == the_questions.length - 1 ){
                        //victory !

                        var end_time = new Date();
                        var total_time = get_epoch(end_time) - get_epoch(start_time);
                        $("#total_time_spent").text(format_time_in_m_s(total_time));
                        $("#avg_time").text(format_time_in_m_s(total_time/the_questions.length));

                        $("#my_input").hide();

                        var totalCorrect = 0;
                        var totalTimes = 0;
                        $.each(the_questions, function(idx,question){
                            totalTimes += question['times'];
                            if(question['times'] === 1){
                                totalCorrect++;
                            }
                        });
                        $("#avg_retry").text((totalTimes/the_questions.length).toFixed(1));
                        var accuracyRate = totalCorrect / the_questions.length;
                        var accuracy = [
                            {name:'Correct',y:accuracyRate},
                            {name:'Wrong',y:1-accuracyRate}
                        ];
                        $('#pieAccuracy').highcharts(pieChartOptions(null, 'My Accuracy Rate', accuracy, true));
                        $("#my_result").modal();

                        //submit result
                        var p = {
                            yyyymmdd: start_time.getFullYear() * 10000 + (start_time.getMonth()+1)*100 + start_time.getDate(),
                            hhmmss: start_time.getHours() * 10000 + start_time.getMinutes()*100 + start_time.getSeconds(),
                            totalSeconds: Math.floor(total_time),
                            totalAnsweredTimes: totalTimes,
                            accuracyRate: accuracyRate
                        };
                        //console.log(p);
                        $.post("/math/submit",p);

                        return;
                    }
                    else{
                        the_questions[current_question]['answered'] = true;
                        //move on to the next one
                        current_question++;
                        populateMath(the_questions[current_question]['question']);
                    }
                }
                $('#answer').val('');
                $('#answer').focus();
            }
        }

        //clear answer and let answer box has focus after page is loaded
        $(document).ready(function () {
            var answer = $('#answer');
            answer.val('');
            answer.focus();
            answer.on("keypress", function (e) {
               if(e.which === 13){
                    checkAnswer(this.value);
               }
            });

            QUEUE.Push(function () {
                math = MathJax.Hub.getAllJax("MathOutput")[0];
            });
        });

        //get questions
        $.getJSON("/math/questions", function (questions){
            //format as Latex
            $.each(questions, function(idx,question){
                question['question'] = question['question'].replace(/\*/g," \\times ");
                question['correctAnswer'] = question['correctAnswer'].toString();
                question['times'] = 0;
            });
            the_questions = questions;
            console.log(questions);

            $('#total_question').text(the_questions.length);
            $('#cur_question').text(0);

            window.setTimeout(function(){populateMath(the_questions[0]['question']);current_question = 0;},2000);
            /*
            //todo: https://stackoverflow.com/questions/3014018/how-to-detect-when-mathjax-is-fully-loaded
            //still cannot render when End signal is received.
            MathJax.Hub.Register.StartupHook("End",function () {
                populateMath(q);
            });
            */
        });
    </script>
{% endblock %}
